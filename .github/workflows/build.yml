name: Build APK & iOS

on: 
  workflow_dispatch:

env:
  FLUTTER_CHANNEL: 'stable' # 'stable', 'beta', or 'master', default to: 'stable'
  FLUTTER_VERSION: '2.10.5'
  XCODE_VERSION: '13.4'
  PATH_TO_AAB: 'build/app/outputs/bundle/release/app-release.aab'
  ANDROID_PACKAGE_NAME: 'com.example.tang.cicdtest'
  PATH_TO_IPA: 'build/ios/ipa/flutter_github_actions_basics.ipa'

jobs:
  build_with_signing:
    runs-on: macos-latest
    timeout-minutes: 30
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Set up Xcode ${{ env.XCODE_VERSION }}
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: ${{ env.XCODE_VERSION }}
      - name: Install the Apple certificate and provisioning profile
        env:
          FS_P12_FILE: ${{ secrets.BUILD_CERTIFICATE_BASE64 }}
          FS_P12_PASS: ${{ secrets.P12_PASSWORD }}
          FS_PROV_FILE: ${{ secrets.BUILD_PROVISION_PROFILE_BASE64 }}
          FS_KEYCHAIN_PASS: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          echo "Convert base64 strings to files"
          echo "$FS_PROV_FILE" >> prov.temp.txt
          echo "$FS_P12_FILE ">> cert.temp.txt
          base64 --decode prov.temp.txt > prov.temp.mobileprovision
          base64 --decode cert.temp.txt > cert.temp.p12
          echo "Copy provisioning file to the correct locations"
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp prov.temp.mobileprovision ~/Library/MobileDevice/Provisioning\ Profiles/prov.mobileprovision
          echo "Create a new keychain & import p12 certificate"
          security create-keychain -p "$FS_KEYCHAIN_PASS" build.keychain
          security import cert.temp.p12 -t agg -k ~/Library/Keychains/build.keychain -P "$FS_P12_PASS" -A
          echo "Set new keychain as a default"
          security list-keychains -s ~/Library/Keychains/build.keychain
          security default-keychain -s ~/Library/Keychains/build.keychain
          security unlock-keychain -p "$FS_KEYCHAIN_PASS" ~/Library/Keychains/build.keychain
          security set-key-partition-list -S apple-tool:,apple: -s -k "$FS_KEYCHAIN_PASS" ~/Library/Keychains/build.keychain
          echo "Clean up temp files"
          rm *.temp.*
      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '2.10.5'
          channel: 'stable'
          architecture: x64
      - run: flutter pub get
      - name: Build IPA
        env:
          FS_KEYCHAIN_PASS: ${{ secrets.FS_KEYCHAIN_PASS }}
        run: |
          echo "Unlocking keychain"
          security unlock-keychain -p "$FS_KEYCHAIN_PASS" ~/Library/Keychains/build.keychain
          # Important, just in case the build takes longer than the default 300s timeout
          # Otherwise the build will freeze at signing the frameworks if the keychain is locked
          echo "Increasing keychain auto lock timeout"
          security set-keychain-settings -lut 1800 ~/Library/Keychains/build.keychain
          flutter build ipa --release
          echo "Locking keychain"
          security lock-keychain ~/Library/Keychains/build.keychain
      - name: Upload IPA artifact
        uses: actions/upload-artifact@v3
        with:
          name: release-ipa
          path: ${{ env.PATH_TO_IPA }}
      - name: Clean up keychain and provisioning profile
        if: ${{ always() }}
        run: |
          security delete-keychain $RUNNER_TEMP/app-signing.keychain-db
          rm ~/Library/MobileDevice/Provisioning\ Profiles/build_pp.mobileprovision

# jobs:
#   build:
#     runs-on: ubuntu-latest
#     steps:
#       - uses: actions/checkout@v3
      # - uses: subosito/flutter-action@v2
      #   with:
      #     flutter-version: '2.10.5'
      #     channel: 'stable'
      #     architecture: x64

# jobs:
#   build:
#     runs-on: macos-latest
#     steps:
#       - uses: actions/checkout@v3
#       - uses: subosito/flutter-action@v2
#         with:
#           flutter-version: '2.10.5'
#           channel: 'stable'
#           architecture: x64
#       - run: flutter pub get
#       # - run: flutter test
#       - run: flutter build apk
#       - uses: actions/upload-artifact@v1
#       with:
#         name: release-apk
#         path: build/app/outputs/apk/release/app-release.apk
